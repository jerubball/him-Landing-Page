<?php
  require_once($_SERVER['DOCUMENT_ROOT'].'/core.php');
  require_https();
  
  $location = $_SERVER['DOCUMENT_ROOT'].urldecode($_SERVER['REQUEST_URI']);
  if (!is_dir($location)) {
    $location = dirname($location);
  }
  $name = str_replace($_SERVER['DOCUMENT_ROOT'], '', $location);
  if ($name[-1] !== '/') {
    $name .= '/';
  }
  while (strpos($name, '//') !== false) {
    $name = str_replace('//', '/', $name);
  }
  chdir($location);
?>
<!DOCTYPE html>
<html>

<head>
<?php
  require_once($_SERVER['DOCUMENT_ROOT'].'/header.html');
?>
  <title>Index of <?= $name ?></title>
</head>

<body onload="Core.Window.setTitle('Index of <?= $name ?>')">
<?php
  require_once($_SERVER['DOCUMENT_ROOT'].'/navbar.html');
?>

<?php
  $mimetypes = unserialize(file_get_contents($_SERVER['DOCUMENT_ROOT'].'/mimetypes.bin'));
  function getmimetype($filename) {
    global $mimetypes;
    $index = strlen($filename);
    while (--$index > 0) {
      if ($filename[$index] === '.') {
        $ext = substr($filename, $index+1);
        if (isset($mimetypes[$ext])) {
          return $mimetypes[$ext];
        }
      }
    }
    return mime_content_type($filename);
  }
  function format_name($entry) {
    return $entry['dir'] ? $entry['name'].'/' : $entry['name'];
  }
  function format_type($entry) {
    return $entry['mime'];
  }
  function format_title($entry) {
    return $entry['type']; //.'; mime='.$entry['mime'].'; charset='.$entry['charset'];
  }
  function format_modified($entry) {
    return date('M d Y, g:i:s a', $entry['modified']);
  }
  function format_size($entry) {
    if (is_numeric($entry['size'])) {
      $value = intval($entry['size']);
      $factor = 0;
      while ($value >= 1000) {
        $value /= 1024;
        $factor++;
      }
      $prefix = [' B', ' KiB', ' MiB', ' GiB', ' TiB', ' PiB', ' EiB'];
      if ($factor == 0) {
        return $value.$prefix[$factor];
      } else {
        return sprintf('%.1f', $value).$prefix[$factor];
      }
    } else {
      return $entry['size'];
    }
  }
  if ($dir = opendir('.')) {
    $table = array();
    //$finfo = finfo_open(FILEINFO_MIME_ENCODING); // FILEINFO_MIME | FILEINFO_MIME_TYPE
    while ($item = readdir($dir)) {
      if ($item[0] !== '.') {
        $entry = array();
        $entry['dir'] = is_dir($item);
        $entry['name'] = $item;
        $entry['type'] = filetype($item);
        if ($entry['type'] === 'dir') {
          $entry['mime'] = 'directory';
        } else {
          $entry['mime'] = getmimetype($item);
        }
        //$entry['charset'] = finfo_file($finfo, $item);
        $entry['modified'] = filemtime($item);
        $entry['size'] = $entry['dir'] ? '-' : filesize($item);
        $table[] = $entry;
      }
    }
    closedir($dir);
    uasort($table, function($a, $b) {
      return strnatcasecmp($a['name'], $b['name']);
    });
  }
?>

<div class="body">
  <div class="p-4">
    <div class="container">
      <div class="row">
        <div class="col-md-12">
          <h1 class="">Index of <?php echo $name; ?></h1>
        </div>
      </div>
    </div>
  </div>
  <div class="p-3">
    <div class="container">
      <div class="row">
        <div class="col-md-12">
<?php
  if (!isset($table)) {
?>
          <p class="lead">
            Directory can not be accessed.
          </p>
<?php
  } else {
?>
          <table class="table sortable" id="table">
            <thead class="thead-light">
              <tr>
                <th scope="col" onclick="Core.Util.sortTable(this);" class="asc sorted">Name <i class="sort fa fa-sort-up"></i> <i class="sort fa fa-sort-down"></i></th>
                <th scope="col" onclick="Core.Util.sortTable(this);" class="asc">Type <i class="sort fa fa-sort-up"></i> <i class="sort fa fa-sort-down"></i></th>
                <th scope="col" onclick="Core.Util.sortTable(this);" class="asc">Modified <i class="sort fa fa-sort-up"></i> <i class="sort fa fa-sort-down"></i></th>
                <th scope="col" onclick="Core.Util.sortTable(this);" class="asc">Size <i class="sort fa fa-sort-up"></i> <i class="sort fa fa-sort-down"></i></th>
              </tr>
            </thead>
            <tbody>
                <th scope="row" data-sort="0"><a href="./..">../</a></th>
                <td data-sort="-"></td>
                <td data-sort="-"></td>
                <td data-sort="-"></td>
            </tbody>
            <tbody>
<?php
    $index = 0;
    foreach ($table as $entry) {
?>
              <tr>
                <th scope="row" data-sort="<?= ++$index ?>"><a href="./<?= $entry['name']; ?>"><?= format_name($entry) ?></a></th>
                <td data-sort="<?= $entry['mime'] ?>" title="<?= format_title($entry) ?>"><?= format_type($entry) ?></td>
                <td data-sort="<?= $entry['modified'] ?>"><?= format_modified($entry) ?></td>
                <td data-sort="<?= $entry['size'] ?>"><?= format_size($entry) ?></td>
              </tr>
<?php
    }
?>
            </tbody>
          </table>
<?php
  }
?>
        </div>
      </div>
    </div>
  </div>
</div>

</body>

</html>

<?php
/*
  exec('ls -alF .', $output);
  exec('ls -1 --group-directories-first', $output);
  foreach ($output as $item) {
    $line = exec('file '.$item);
  }
  $output = scandir('.');
  natcasesort($list);
  $sort = $_GET['sort'];
  $desc = isset($_GET['desc']) ? -1 : 1;
  switch($sort) {
    case 'type':
      $func = function($a, $b) {
        return $desc * strnatcasecmp($a['mime'], $b['mime']);
      };
      break;
    default:
      $func = function($a, $b) {
        return $desc * strnatcasecmp($a['name'], $b['name']);
      };
      break;
  }
  
  $fileentry = file_get_contents('http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types');
  $fileentry = file_get_contents('mime.types');
  $lineentries = explode("\n", $fileentry);
  $mimetypes = array();
  foreach ($lineentries as $lineentry) {
    if ($lineentry && strlen($lineentry) > 0 && $lineentry[0] !== '#') {
      $typepair = preg_split('/\t+/', $lineentry);
      if (sizeof($typepair) === 2) {
        $extensions = explode(' ', $typepair[1]);
        foreach ($extensions as $extension) {
          $mimetypes[$extension] = $typepair[0];
        }
      }
    }
  }
  file_put_contents('mimetypes.bin', serialize($mimetypes));
*/
?>
