<!DOCTYPE html>
<html>

<head>
<?php
  require_once($_SERVER['DOCUMENT_ROOT'].'/header.html');
?>
  <title>template</title>
</head>

<?php
  $location = $_SERVER['DOCUMENT_ROOT'].urldecode($_SERVER['REQUEST_URI']);
  if (!is_dir($location)) {
    $location = dirname($location);
  }
  $name = str_replace($_SERVER['DOCUMENT_ROOT'], '', $location);
  if ($name[-1] !== '/') {
    $name .= '/';
  }
  while (strpos($name, '//') !== false) {
    $name = str_replace('//', '/', $name);
  }
  chdir($location);
?>

<body onload="Core.Window.setTitle('Index of <?php echo $name; ?>')">
<?php
  require_once($_SERVER['DOCUMENT_ROOT'].'/navbar.html');
?>

<?php
  if ($dir = opendir('.')) {
    $table = array();
    while ($item = readdir($dir)) {
      if ($item[0] !== '.') {
        $entry = array();
        $entry['dir'] = is_dir($item);
        $entry['name'] = $item;
        $entry['type'] = filetype($item);
        $entry['mime'] = mime_content_type($item);
        $entry['modified'] = filemtime($item);
        $entry['size'] = $entry['dir'] ? '-' : filesize($item);
        $table[] = $entry;
      }
    }
    closedir($dir);
    uasort($table, function($a, $b) {
      return strnatcasecmp($a['name'], $b['name']);
    });
  }
  function format_name($entry) {
    return $entry['dir'] ? $entry['name'].'/' : $entry['name'];
  }
  function format_type($entry) {
    return $entry['mime'];
  }
  function format_modified($entry) {
    return date('M d Y, g:i:s a', $entry['modified']);
  }
  function format_size($entry) {
    if (is_numeric($entry['size'])) {
      $value = intval($entry['size']);
      $factor = 0;
      while ($value >= 1000) {
        $value /= 1024;
        $factor++;
      }
      $prefix = [' B', ' KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB'];
      if ($factor == 0) {
        return $value.$prefix[$factor];
      } else {
        return sprintf('%.1f', $value).$prefix[$factor];
      }
    } else {
      return $entry['size'];
    }
  }
?>

<style>
  th.asc.sorted::after {
    content: " ";
  }
  th.desc.sorted::after {
    content: " ";
  }
  th i.fa {
    visibility: hidden;
    display: none;
  }
  th.asc.sorted i.fa-sort-up, th.desc.sorted i.fa-sort-down {
    visibility: visible;
    display: inline-block;
  }
</style>

<script>
    const strnatcasecmp = function(a, b) {
        return a.localeCompare(b, undefined, {numeric: true, sensitivity: 'base'})
    }
    const getData = function(table, column) {
        var arr = [];
        for (var i = 1; i < table.rows.length; i++) {
            arr.push({'index': i, 'data': table.rows[i].children[column].dataset['data']});
        }
        return arr;
    }
    const getHTML = function(table) {
        var arr = [];
        for (var i = 0; i < table.rows.length; i++) {
            arr.push(table.rows[i].innerHTML);
        }
        return arr;
    }
    const sort = function(column) {
        var table = document.getElementById('table');
        var head = table.rows[0];
        var cell = head.children[column];
        var html = getHTML(table);
        var data = getData(table, column);
        
        if (cell.classList.contains('sorted')) {
            cell.classList.replace('asc', 'desc') || cell.classList.replace('desc', 'asc');
        } else {
            for (var i = 0; i < head.children.length; i++) {
                head.children[i].classList.remove('sorted')
            }
            cell.classList.add('sorted');
        }
        
        var mode = 0;
        if (cell.classList.contains('asc')) {
            mode = 1;
        } else if (cell.classList.contains('desc')) {
            mode = -1;
        }
        
        data.sort(function(a, b) {
            return mode * strnatcasecmp(a['data'], b['data']);
        });
        for (var i = 0; i < data.length; i++) {
            table.rows[i+1].innerHTML = html[data[i]['index']];
        }
        return false;
    }
</script>

<div class="body">
  <div class="p-4">
    <div class="container">
      <div class="row">
        <div class="col-md-12">
          <h1 class="">Index of <?php echo $name; ?></h1>
        </div>
      </div>
    </div>
  </div>
  <div class="p-3">
    <div class="container">
      <div class="row">
        <div class="col-md-12">
<?php
  if (!isset($table)) {
?>
          <p class="lead">
            Directory can not be accessed.
          </p>
<?php
  } else {
?>
          <table class="table" id="table">
            <thead class="thead-light">
              <tr>
                <th scope="col" onclick="sort(0);" class="asc sorted">Name <i class="fa fa-sort-up"></i> <i class="fa fa-sort-down"></i></th>
                <th scope="col" onclick="sort(1);" class="asc">Type <i class="fa fa-sort-up"></i> <i class="fa fa-sort-down"></i></th>
                <th scope="col" onclick="sort(2);" class="asc">Modified <i class="fa fa-sort-up"></i> <i class="fa fa-sort-down"></i></th>
                <th scope="col" onclick="sort(3);" class="asc">Size <i class="fa fa-sort-up"></i> <i class="fa fa-sort-down"></i></th>
              </tr>
            </thead>
            <tbody>
<?php
    foreach ($table as $entry) {
?>
              <tr>
                <th scope="row" data-data="<?php echo $entry['name']; ?>"><a href="./<?php echo $entry['name']; ?>"><?php echo format_name($entry); ?></a></th>
                <td data-data="<?php echo $entry['mime']; ?>"><?php echo format_type($entry); ?></td>
                <td data-data="<?php echo $entry['modified']; ?>"><?php echo format_modified($entry); ?></td>
                <td data-data="<?php echo $entry['size']; ?>"><?php echo format_size($entry); ?></td>
              </tr>
<?php
    }
?>
            </tbody>
          </table>
<?php
  }
?>
        </div>
      </div>
    </div>
  </div>
</div>

</body>

</html>

<?php
/*
  exec('ls -alF .', $output);
  exec('ls -1 --group-directories-first', $output);
  foreach ($output as $item) {
    $line = exec('file '.$item);
  }
  $output = scandir('.');
  natcasesort($list);
  $sort = $_GET['sort'];
  $desc = isset($_GET['desc']) ? -1 : 1;
  switch($sort) {
    case 'type':
      $func = function($a, $b) {
        return $desc * strnatcasecmp($a['mime'], $b['mime']);
      };
      break;
    default:
      $func = function($a, $b) {
        return $desc * strnatcasecmp($a['name'], $b['name']);
      };
      break;
  }
*/
?>
